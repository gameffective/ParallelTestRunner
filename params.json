{"name":"ParallelTestRunner v1.0","tagline":"Parallel test runner for Visual Studio vstest mstest tests","body":"# Description\r\nAllows parallel run of Visual Studio tests from the command line. Primary usage is to speed up slow tests during Continuous Integration process. It is possible for example to write [Selenium](http://www.seleniumhq.org/) UI tests using Visual Studio testing framework and scale them by using ParallelTestRunner and [Selenium Grid](http://www.seleniumhq.org/projects/grid/). Basically this tool runs several Visual Studio VSTest.Console.exe processes and executes one [TestClass] in each of them. The tool generates result.trx file by merging all test classes results.\r\n\r\n# Usage\r\n```\r\nParallelTestRunner.exe [options] [assembly]...\r\n\r\nOptions:\r\n  provider:        specifies which version of VSTest.Console.exe to use: VSTEST_2012, VSTEST_2013\r\n  threadcount:     specifies the number of parallel processes, default is 4\r\n  root:            the working directory where the temporary files will be generated\r\n  out:             resulting trx file, can be absolute path or relative to the working directory\r\n  \r\nassembly           the list of assemblies that contain visual studio tests\r\n\r\nExamples:\r\n  ParallelTestRunner.exe provider:VSTEST_2013 threadcount:10 root:./TestResults out:result.trx ./UITests/SeleniumIntegration.Tests.dll\r\n```\r\n\r\n# Download\r\nSee [releases](https://github.com/sscobici/ParallelTestRunner/releases).\r\nBuild was created with the help of [AppVeyor](https://ci.appveyor.com/project/sscobici/paralleltestrunner) Continuous Integration tool\r\n\r\n# Issues\r\nFeel free to open an [issue](https://github.com/sscobici/ParallelTestRunner/issues) if the tool needs to be enhanced or you have found a bug \r\n\r\n# Additional Information\r\nBy default all TestClasses are executed in parallel. TestMethods inside each TestClass are executed consecutively.\r\nThere is a possibility to group several TestClasses in order to execute them consecutively.\r\n\r\nCreate the following Attribute in your test project:\r\n```\r\n    public class TestClassGroupAttribute : Attribute\r\n    {\r\n        public TestClassGroupAttribute()\r\n        {\r\n        }\r\n\r\n        public TestClassGroupAttribute(string name)\r\n        {\r\n            Name = name;\r\n        }\r\n\r\n        public TestClassGroupAttribute(string name, bool exclusive)\r\n            : this(name)\r\n        {\r\n            Exclusive = exclusive;\r\n        }\r\n\r\n        public string Name { get; set; }\r\n        \r\n        public bool Exclusive { get; set; }\r\n    }\r\n```\r\n\r\nIn the below example two groups are defined to be executed in parallel. ClassA and ClassB tests will be executed consecutively.\r\n\r\n```\r\n[TestClassGroup(\"FirstGroup\")]\r\nClassA { ... }\r\n\r\n[TestClassGroup(\"FirstGroup\")]\r\nClassB { ... }\r\n\r\n[TestClassGroup(\"SecondGroup\")]\r\nClassC { ... }\r\n```\r\n\r\nSpecify attribute parameter Exclusive = true if there is a need to run some tests exclusively. This will ensure that no other tests are run in parallel at that time.\r\n\r\n```\r\n[TestClassGroup(\"ExclusiveGroup\", Exclusive = true)]\r\nClassExclusive { ... }\r\n```\r\n\r\n# Requirements\r\n.Net Framework 4.5 or higher\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}